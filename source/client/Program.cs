
using System;
using System.IO;
using System.Text;
using System.Security.Cryptography;

public static class gdacli {
	
	public static string configPath
		=> Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + "/.config/gdacli.conf";
	
	public static void Main (string[] args) {
		
		Console.WriteLine("gdacli, 2022.");
		Console.WriteLine();
		
		if (!File.Exists(configPath)) Configure();
		
		if (args.Length == 0) {
			
			Help();
			Environment.Exit(-1);
		}
		
		switch (args[0]) {
			
			case "--config": case "-c": Configure(); break;
			
			case "-w": Write(args.Length > 1 ? args[1] : ""); break;
			
			case "-v": View(args.Length > 1 ? args[1] : ""); break;
			
			case "-s": Search(args.Length > 1 ? args[1] : ""); break;
			
			default: Help(); break;
		}
		
		Environment.Exit(0);
	}
	
	private static void Help () {
		
		Console.WriteLine("Help page for gdacli");
		Console.WriteLine();
		Console.WriteLine("-w <entry_name>");
		Console.WriteLine("    writes a post with a title");
		Console.WriteLine("    if the post already exists, it will edit it");
		Console.WriteLine();
		Console.WriteLine("-v <entry_name>");
		Console.WriteLine("    views a post with a name");
		Console.WriteLine();
		Console.WriteLine("-s <query>");
		Console.WriteLine("    searches the database for entrys");
		
		Console.WriteLine("\n\n All <> are optional.");
	}
	
	private static void Configure () {
			
		Console.WriteLine("Config file not found!");
		Console.WriteLine();
		Console.Write("Enter Server Address > ");
		string address = Console.ReadLine();
		Console.Write("Enter Server Port > ");
		string port = Console.ReadLine();
		Console.Write("Enter Server Password > ");
		string passwd = HashPassword(Console.ReadLine());
		
		File.WriteAllLines(configPath, new string[3]{address,port,passwd});
	
		Console.WriteLine();
		Console.WriteLine("Config file Generated by user, good to go.");
		Console.WriteLine("run 'gdacli --config || -c' to regenerate.");
		Console.WriteLine();
	}
	
	private static void Write (string input) {
		
		if (input == "") {
			
			Console.Write("Enter Entry-Title > ");
			input = Console.ReadLine();
		}
		
		string content = Network.Fetch(input);
		
		string newContent = Editor.Edit(content == "404\n" ? "" : content);
		
		Console.Write("Press return to skip this step if you are editing an existing post.\nEnter Entry-Tags a,b,c > ");
		string tags = Console.ReadLine();
		
		Console.WriteLine("Posting entry....");
		
		Network.Post(input, tags, newContent);
		
		Console.WriteLine("Posted entry successfully..");
	}
	
	private static void View (string input) {
		
		if (input == "") {
			
			Console.Write("Enter Entry-Title > ");
			input = Console.ReadLine();
		}
		
		string content = Network.Fetch(input);
		
		if (content == "404") {
			
			Console.WriteLine("The Server returned 404..");
			
		} else {
			
			Console.WriteLine(content);
		}
	}
	
	private static void Search (string input) {
		
		if (input == "") {
			
			Console.Write("Enter Search Query > ");
			input = Console.ReadLine();
		}
		
		string[] results = Network.Search(input);
		
		Console.WriteLine("\nReturned: " + results.Length + " results\n");
		
		foreach (string result in results)
			Console.WriteLine(result);
	}
	

    private static string HashPassword (string input) {

        HashAlgorithm algorithm = SHA256.Create();
        byte[] hashedData = algorithm.ComputeHash(Encoding.Unicode.GetBytes(input));

        StringBuilder stringBuilder = new StringBuilder();
        foreach (byte b in hashedData)
            stringBuilder.Append(b.ToString("X2"));

        return stringBuilder.ToString();
    }
}
